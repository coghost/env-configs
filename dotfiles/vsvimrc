source ~/.vimrc
set clipboard+=unnamed
" <leader>
" 修改leader键
" only work in local namespace
let mapleader=','
" work for global
let g:mapleader=','
set easymotion

" 配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC

"==========================================
" General Settings 基础设置
"==========================================

" history存储容量
set history=100000

nnoremap U <C-r>

" Map ; to : and save a million keystrokes 用于快速进入命令行
nnoremap ; :

nmap <leader>WQ :wa<CR>:q<CR>
" Quickly close the current window
nnoremap <leader>q :q<CR>
" Quickly save the current file
nnoremap <leader>w :w<CR>

" show cursor position
set ruler
" show line number
set number
" show relativenumber
set relativenumber number

au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber number
  else
    set relativenumber
  endif
endfunc

" 大小写不敏感
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
set smartcase
" magic
set magic


" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
" set foldmethod=indent
set foldmethod=indent
set foldlevel=99
" 代码折叠自定义快捷键 <leader>zz
let g:FoldMethod = 0
" map <leader>zz :call ToggleFold()<cr>
" fun! ToggleFold()
"     if g:FoldMethod == 0
"         exe "normal! zM"
"         let g:FoldMethod = 1
"     else
"         exe "normal! zR"
"         let g:FoldMethod = 0
"     endif
" endfun

" 开启实时搜索
set incsearch
" 高亮搜索内容
set hlsearch

" 搜索相关
" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
" map <space> /
" 进入搜索Use sane regexes"
" nnoremap / /\v
" vnoremap / /\v


" Keep search pattern at the center of the screen.
" nnoremap <silent> n nzz
" nnoremap <silent> N Nzz
" nnoremap <silent> * *zz
" nnoremap <silent> # #zz
" nnoremap <silent> g* g*zz

" 去掉搜索高亮
noremap <leader>,/ :nohls<CR>

" nnoremap <leader>d  <C-d>
" nnoremap <leader>u  <C-u>

nnoremap Y y$


set so=5
set surround


" noremap / :action Find<CR>
" noremap f :action AceAction<CR>
" noremap F :action AceTargetAction<CR>


"'clipboard'      'cb'    clipboard options
"'digraph'        'dg'    enable the entering of digraphs in Insert mode
"'gdefault'       'gd'    the ":substitute" flag 'g' is default on
"'history'        'hi'    number of command-lines that are remembered
"'hlsearch'       'hls'   highlight matches with last search pattern
"'ignorecase'     'ic'    ignore case in search patterns
"'iskeyword'      'isk'   defines keywords for commands like 'w', '*', etc.
"'incsearch'      'is'    show where search pattern typed so far matches
"'matchpairs'     'mps'   pairs of characters that "%" can match
"'nrformats'      'nf'    number formats recognized for CTRL-A command
"'number'         'nu'    print the line number in front of each line
"'relativenumber' 'rnu'   show the line number relative to the line with
                         "the cursor
"'scroll'         'scr'   lines to scroll with CTRL-U and CTRL-D
"'scrolljump'     'sj'    minimum number of lines to scroll
"'scrolloff'      'so'    minimum nr. of lines above and below cursor
"'selection'      'sel'   what type of selection to use
"'showmode'       'smd'   message on status line to show current mode
"'sidescroll'     'ss'    minimum number of columns to scroll horizontal
"'sidescrolloff'  'siso'  min. nr. of columns to left and right of cursor
"'smartcase'      'scs'   no ignore case when pattern has uppercase
"'timeout'        'to'    use timeout for mapped key sequences
"'timeoutlen'     'tm'    time that is waited for a mapped key sequence
"'undolevels'     'ul'    maximum number of changes that can be undone
"'viminfo'        'vi'    information to remember after restart
"'visualbell'     'vb'    use visual bell instead of beeping
"'wrapscan'       'ws'    searches wrap around the end of the file
set ideajoinset clipboard+=ideaput
